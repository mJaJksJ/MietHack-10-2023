//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ApiService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param login (optional) Логин
     * @param password (optional) Пароль
     * @return Success
     */
    authorize(login: string | undefined, password: string | undefined, cancelToken?: CancelToken | undefined): Promise<AuthResponseModel> {
        let url_ = this.baseUrl + "/api/authorize?";
        if (login === null)
            throw new Error("The parameter 'login' cannot be null.");
        else if (login !== undefined)
            url_ += "Login=" + encodeURIComponent("" + login) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "Password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthorize(_response);
        });
    }

    protected processAuthorize(response: AxiosResponse): Promise<AuthResponseModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AuthResponseModel.fromJS(resultData200);
            return Promise.resolve<AuthResponseModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthResponseModel>(null as any);
    }

    /**
     * @return Success
     */
    deAuth( cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/authorize/deauth";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeAuth(_response);
        });
    }

    protected processDeAuth(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param name (optional) 
     * @param date (optional) 
     * @param organizer_Id (optional) 
     * @param organizer_FullName (optional) 
     * @param organizer_Group (optional) 
     * @param organizer_LinkToProfile (optional) 
     * @param linqToGroup (optional) 
     * @return Success
     */
    add(id: number | undefined, name: string | undefined, date: Date | undefined, organizer_Id: number | undefined, organizer_FullName: string | undefined, organizer_Group: string | undefined, organizer_LinkToProfile: string | undefined, linqToGroup: string | undefined, ev: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/Add{ev}?";
        if (ev === undefined || ev === null)
            throw new Error("The parameter 'ev' must be defined.");
        url_ = url_.replace("{ev}", encodeURIComponent("" + ev));
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "Date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
        if (organizer_Id === null)
            throw new Error("The parameter 'organizer_Id' cannot be null.");
        else if (organizer_Id !== undefined)
            url_ += "Organizer.Id=" + encodeURIComponent("" + organizer_Id) + "&";
        if (organizer_FullName === null)
            throw new Error("The parameter 'organizer_FullName' cannot be null.");
        else if (organizer_FullName !== undefined)
            url_ += "Organizer.FullName=" + encodeURIComponent("" + organizer_FullName) + "&";
        if (organizer_Group === null)
            throw new Error("The parameter 'organizer_Group' cannot be null.");
        else if (organizer_Group !== undefined)
            url_ += "Organizer.Group=" + encodeURIComponent("" + organizer_Group) + "&";
        if (organizer_LinkToProfile === null)
            throw new Error("The parameter 'organizer_LinkToProfile' cannot be null.");
        else if (organizer_LinkToProfile !== undefined)
            url_ += "Organizer.LinkToProfile=" + encodeURIComponent("" + organizer_LinkToProfile) + "&";
        if (linqToGroup === null)
            throw new Error("The parameter 'linqToGroup' cannot be null.");
        else if (linqToGroup !== undefined)
            url_ += "LinqToGroup=" + encodeURIComponent("" + linqToGroup) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    delete(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/Delete{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param name (optional) 
     * @param date (optional) 
     * @param organizer_Id (optional) 
     * @param organizer_FullName (optional) 
     * @param organizer_Group (optional) 
     * @param organizer_LinkToProfile (optional) 
     * @param linqToGroup (optional) 
     * @return Success
     */
    update(id: number | undefined, name: string | undefined, date: Date | undefined, organizer_Id: number | undefined, organizer_FullName: string | undefined, organizer_Group: string | undefined, organizer_LinkToProfile: string | undefined, linqToGroup: string | undefined, ev: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/Update{ev}?";
        if (ev === undefined || ev === null)
            throw new Error("The parameter 'ev' must be defined.");
        url_ = url_.replace("{ev}", encodeURIComponent("" + ev));
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "Date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
        if (organizer_Id === null)
            throw new Error("The parameter 'organizer_Id' cannot be null.");
        else if (organizer_Id !== undefined)
            url_ += "Organizer.Id=" + encodeURIComponent("" + organizer_Id) + "&";
        if (organizer_FullName === null)
            throw new Error("The parameter 'organizer_FullName' cannot be null.");
        else if (organizer_FullName !== undefined)
            url_ += "Organizer.FullName=" + encodeURIComponent("" + organizer_FullName) + "&";
        if (organizer_Group === null)
            throw new Error("The parameter 'organizer_Group' cannot be null.");
        else if (organizer_Group !== undefined)
            url_ += "Organizer.Group=" + encodeURIComponent("" + organizer_Group) + "&";
        if (organizer_LinkToProfile === null)
            throw new Error("The parameter 'organizer_LinkToProfile' cannot be null.");
        else if (organizer_LinkToProfile !== undefined)
            url_ += "Organizer.LinkToProfile=" + encodeURIComponent("" + organizer_LinkToProfile) + "&";
        if (linqToGroup === null)
            throw new Error("The parameter 'linqToGroup' cannot be null.");
        else if (linqToGroup !== undefined)
            url_ += "LinqToGroup=" + encodeURIComponent("" + linqToGroup) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getAll( cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getById(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Event/GetById{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param fullName (optional) 
     * @param group (optional) 
     * @param linkToProfile (optional) 
     * @return Success
     */
    add2(id: number | undefined, fullName: string | undefined, group: string | undefined, linkToProfile: string | undefined, student: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Student/Add{student}?";
        if (student === undefined || student === null)
            throw new Error("The parameter 'student' must be defined.");
        url_ = url_.replace("{student}", encodeURIComponent("" + student));
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (fullName === null)
            throw new Error("The parameter 'fullName' cannot be null.");
        else if (fullName !== undefined)
            url_ += "FullName=" + encodeURIComponent("" + fullName) + "&";
        if (group === null)
            throw new Error("The parameter 'group' cannot be null.");
        else if (group !== undefined)
            url_ += "Group=" + encodeURIComponent("" + group) + "&";
        if (linkToProfile === null)
            throw new Error("The parameter 'linkToProfile' cannot be null.");
        else if (linkToProfile !== undefined)
            url_ += "LinkToProfile=" + encodeURIComponent("" + linkToProfile) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd2(_response);
        });
    }

    protected processAdd2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    delete2(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Student/Delete{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete2(_response);
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param fullName (optional) 
     * @param group (optional) 
     * @param linkToProfile (optional) 
     * @return Success
     */
    update2(id: number | undefined, fullName: string | undefined, group: string | undefined, linkToProfile: string | undefined, student: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Student/Update{student}?";
        if (student === undefined || student === null)
            throw new Error("The parameter 'student' must be defined.");
        url_ = url_.replace("{student}", encodeURIComponent("" + student));
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (fullName === null)
            throw new Error("The parameter 'fullName' cannot be null.");
        else if (fullName !== undefined)
            url_ += "FullName=" + encodeURIComponent("" + fullName) + "&";
        if (group === null)
            throw new Error("The parameter 'group' cannot be null.");
        else if (group !== undefined)
            url_ += "Group=" + encodeURIComponent("" + group) + "&";
        if (linkToProfile === null)
            throw new Error("The parameter 'linkToProfile' cannot be null.");
        else if (linkToProfile !== undefined)
            url_ += "LinkToProfile=" + encodeURIComponent("" + linkToProfile) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate2(_response);
        });
    }

    protected processUpdate2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getAll2( cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Student/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll2(_response);
        });
    }

    protected processGetAll2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getById2(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Student/GetById{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetById2(_response);
        });
    }

    protected processGetById2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param name (optional) 
     * @param logo (optional) 
     * @param goals (optional) 
     * @param tasks (optional) 
     * @param description (optional) 
     * @param manager_Id (optional) 
     * @param manager_Login (optional) 
     * @param manager_PasswordHash (optional) 
     * @param manager_Student_Id (optional) 
     * @param manager_Student_FullName (optional) 
     * @param manager_Student_Group (optional) 
     * @param manager_Student_LinkToProfile (optional) 
     * @param manager_StudentId (optional) 
     * @param manager_Status (optional) <p>Variants:</p><ul></ul>
     * @param participants (optional) 
     * @return Success
     */
    add3(id: number | undefined, name: string | undefined, logo: string | undefined, goals: string | undefined, tasks: string | undefined, description: string | undefined, manager_Id: number | undefined, manager_Login: string | undefined, manager_PasswordHash: string | undefined, manager_Student_Id: number | undefined, manager_Student_FullName: string | undefined, manager_Student_Group: string | undefined, manager_Student_LinkToProfile: string | undefined, manager_StudentId: number | undefined, manager_Status: Status | undefined, participants: Student[] | undefined, studentUnion: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StudentUnion/Add{studentUnion}?";
        if (studentUnion === undefined || studentUnion === null)
            throw new Error("The parameter 'studentUnion' must be defined.");
        url_ = url_.replace("{studentUnion}", encodeURIComponent("" + studentUnion));
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (logo === null)
            throw new Error("The parameter 'logo' cannot be null.");
        else if (logo !== undefined)
            url_ += "Logo=" + encodeURIComponent("" + logo) + "&";
        if (goals === null)
            throw new Error("The parameter 'goals' cannot be null.");
        else if (goals !== undefined)
            url_ += "Goals=" + encodeURIComponent("" + goals) + "&";
        if (tasks === null)
            throw new Error("The parameter 'tasks' cannot be null.");
        else if (tasks !== undefined)
            url_ += "Tasks=" + encodeURIComponent("" + tasks) + "&";
        if (description === null)
            throw new Error("The parameter 'description' cannot be null.");
        else if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (manager_Id === null)
            throw new Error("The parameter 'manager_Id' cannot be null.");
        else if (manager_Id !== undefined)
            url_ += "Manager.Id=" + encodeURIComponent("" + manager_Id) + "&";
        if (manager_Login === null)
            throw new Error("The parameter 'manager_Login' cannot be null.");
        else if (manager_Login !== undefined)
            url_ += "Manager.Login=" + encodeURIComponent("" + manager_Login) + "&";
        if (manager_PasswordHash === null)
            throw new Error("The parameter 'manager_PasswordHash' cannot be null.");
        else if (manager_PasswordHash !== undefined)
            url_ += "Manager.PasswordHash=" + encodeURIComponent("" + manager_PasswordHash) + "&";
        if (manager_Student_Id === null)
            throw new Error("The parameter 'manager_Student_Id' cannot be null.");
        else if (manager_Student_Id !== undefined)
            url_ += "Manager.Student.Id=" + encodeURIComponent("" + manager_Student_Id) + "&";
        if (manager_Student_FullName === null)
            throw new Error("The parameter 'manager_Student_FullName' cannot be null.");
        else if (manager_Student_FullName !== undefined)
            url_ += "Manager.Student.FullName=" + encodeURIComponent("" + manager_Student_FullName) + "&";
        if (manager_Student_Group === null)
            throw new Error("The parameter 'manager_Student_Group' cannot be null.");
        else if (manager_Student_Group !== undefined)
            url_ += "Manager.Student.Group=" + encodeURIComponent("" + manager_Student_Group) + "&";
        if (manager_Student_LinkToProfile === null)
            throw new Error("The parameter 'manager_Student_LinkToProfile' cannot be null.");
        else if (manager_Student_LinkToProfile !== undefined)
            url_ += "Manager.Student.LinkToProfile=" + encodeURIComponent("" + manager_Student_LinkToProfile) + "&";
        if (manager_StudentId === null)
            throw new Error("The parameter 'manager_StudentId' cannot be null.");
        else if (manager_StudentId !== undefined)
            url_ += "Manager.StudentId=" + encodeURIComponent("" + manager_StudentId) + "&";
        if (manager_Status === null)
            throw new Error("The parameter 'manager_Status' cannot be null.");
        else if (manager_Status !== undefined)
            url_ += "Manager.Status=" + encodeURIComponent("" + manager_Status) + "&";
        if (participants === null)
            throw new Error("The parameter 'participants' cannot be null.");
        else if (participants !== undefined)
            participants && participants.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Participants[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd3(_response);
        });
    }

    protected processAdd3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    delete3(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StudentUnion/Delete{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete3(_response);
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param name (optional) 
     * @param logo (optional) 
     * @param goals (optional) 
     * @param tasks (optional) 
     * @param description (optional) 
     * @param manager_Id (optional) 
     * @param manager_Login (optional) 
     * @param manager_PasswordHash (optional) 
     * @param manager_Student_Id (optional) 
     * @param manager_Student_FullName (optional) 
     * @param manager_Student_Group (optional) 
     * @param manager_Student_LinkToProfile (optional) 
     * @param manager_StudentId (optional) 
     * @param manager_Status (optional) <p>Variants:</p><ul></ul>
     * @param participants (optional) 
     * @return Success
     */
    update3(id: number | undefined, name: string | undefined, logo: string | undefined, goals: string | undefined, tasks: string | undefined, description: string | undefined, manager_Id: number | undefined, manager_Login: string | undefined, manager_PasswordHash: string | undefined, manager_Student_Id: number | undefined, manager_Student_FullName: string | undefined, manager_Student_Group: string | undefined, manager_Student_LinkToProfile: string | undefined, manager_StudentId: number | undefined, manager_Status: Status | undefined, participants: Student[] | undefined, studentUnion: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StudentUnion/Update{studentUnion}?";
        if (studentUnion === undefined || studentUnion === null)
            throw new Error("The parameter 'studentUnion' must be defined.");
        url_ = url_.replace("{studentUnion}", encodeURIComponent("" + studentUnion));
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (logo === null)
            throw new Error("The parameter 'logo' cannot be null.");
        else if (logo !== undefined)
            url_ += "Logo=" + encodeURIComponent("" + logo) + "&";
        if (goals === null)
            throw new Error("The parameter 'goals' cannot be null.");
        else if (goals !== undefined)
            url_ += "Goals=" + encodeURIComponent("" + goals) + "&";
        if (tasks === null)
            throw new Error("The parameter 'tasks' cannot be null.");
        else if (tasks !== undefined)
            url_ += "Tasks=" + encodeURIComponent("" + tasks) + "&";
        if (description === null)
            throw new Error("The parameter 'description' cannot be null.");
        else if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (manager_Id === null)
            throw new Error("The parameter 'manager_Id' cannot be null.");
        else if (manager_Id !== undefined)
            url_ += "Manager.Id=" + encodeURIComponent("" + manager_Id) + "&";
        if (manager_Login === null)
            throw new Error("The parameter 'manager_Login' cannot be null.");
        else if (manager_Login !== undefined)
            url_ += "Manager.Login=" + encodeURIComponent("" + manager_Login) + "&";
        if (manager_PasswordHash === null)
            throw new Error("The parameter 'manager_PasswordHash' cannot be null.");
        else if (manager_PasswordHash !== undefined)
            url_ += "Manager.PasswordHash=" + encodeURIComponent("" + manager_PasswordHash) + "&";
        if (manager_Student_Id === null)
            throw new Error("The parameter 'manager_Student_Id' cannot be null.");
        else if (manager_Student_Id !== undefined)
            url_ += "Manager.Student.Id=" + encodeURIComponent("" + manager_Student_Id) + "&";
        if (manager_Student_FullName === null)
            throw new Error("The parameter 'manager_Student_FullName' cannot be null.");
        else if (manager_Student_FullName !== undefined)
            url_ += "Manager.Student.FullName=" + encodeURIComponent("" + manager_Student_FullName) + "&";
        if (manager_Student_Group === null)
            throw new Error("The parameter 'manager_Student_Group' cannot be null.");
        else if (manager_Student_Group !== undefined)
            url_ += "Manager.Student.Group=" + encodeURIComponent("" + manager_Student_Group) + "&";
        if (manager_Student_LinkToProfile === null)
            throw new Error("The parameter 'manager_Student_LinkToProfile' cannot be null.");
        else if (manager_Student_LinkToProfile !== undefined)
            url_ += "Manager.Student.LinkToProfile=" + encodeURIComponent("" + manager_Student_LinkToProfile) + "&";
        if (manager_StudentId === null)
            throw new Error("The parameter 'manager_StudentId' cannot be null.");
        else if (manager_StudentId !== undefined)
            url_ += "Manager.StudentId=" + encodeURIComponent("" + manager_StudentId) + "&";
        if (manager_Status === null)
            throw new Error("The parameter 'manager_Status' cannot be null.");
        else if (manager_Status !== undefined)
            url_ += "Manager.Status=" + encodeURIComponent("" + manager_Status) + "&";
        if (participants === null)
            throw new Error("The parameter 'participants' cannot be null.");
        else if (participants !== undefined)
            participants && participants.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Participants[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate3(_response);
        });
    }

    protected processUpdate3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getAll3( cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StudentUnion/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll3(_response);
        });
    }

    protected processGetAll3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getById3(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StudentUnion/GetById{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetById3(_response);
        });
    }

    protected processGetById3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param login (optional) 
     * @param passwordHash (optional) 
     * @param student_Id (optional) 
     * @param student_FullName (optional) 
     * @param student_Group (optional) 
     * @param student_LinkToProfile (optional) 
     * @param studentId (optional) 
     * @param status (optional) <p>Variants:</p><ul></ul>
     * @return Success
     */
    add4(id: number | undefined, login: string | undefined, passwordHash: string | undefined, student_Id: number | undefined, student_FullName: string | undefined, student_Group: string | undefined, student_LinkToProfile: string | undefined, studentId: number | undefined, status: Status | undefined, user: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Add{user}?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{user}", encodeURIComponent("" + user));
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (login === null)
            throw new Error("The parameter 'login' cannot be null.");
        else if (login !== undefined)
            url_ += "Login=" + encodeURIComponent("" + login) + "&";
        if (passwordHash === null)
            throw new Error("The parameter 'passwordHash' cannot be null.");
        else if (passwordHash !== undefined)
            url_ += "PasswordHash=" + encodeURIComponent("" + passwordHash) + "&";
        if (student_Id === null)
            throw new Error("The parameter 'student_Id' cannot be null.");
        else if (student_Id !== undefined)
            url_ += "Student.Id=" + encodeURIComponent("" + student_Id) + "&";
        if (student_FullName === null)
            throw new Error("The parameter 'student_FullName' cannot be null.");
        else if (student_FullName !== undefined)
            url_ += "Student.FullName=" + encodeURIComponent("" + student_FullName) + "&";
        if (student_Group === null)
            throw new Error("The parameter 'student_Group' cannot be null.");
        else if (student_Group !== undefined)
            url_ += "Student.Group=" + encodeURIComponent("" + student_Group) + "&";
        if (student_LinkToProfile === null)
            throw new Error("The parameter 'student_LinkToProfile' cannot be null.");
        else if (student_LinkToProfile !== undefined)
            url_ += "Student.LinkToProfile=" + encodeURIComponent("" + student_LinkToProfile) + "&";
        if (studentId === null)
            throw new Error("The parameter 'studentId' cannot be null.");
        else if (studentId !== undefined)
            url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd4(_response);
        });
    }

    protected processAdd4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getPassword(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/GetPassword{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPassword(_response);
        });
    }

    protected processGetPassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AuthResponseModel implements IAuthResponseModel {
    name?: string | undefined;
    token?: string | undefined;
    role?: Status;

    constructor(data?: IAuthResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.token = _data["token"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): AuthResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["token"] = this.token;
        data["role"] = this.role;
        return data;
    }
}

export interface IAuthResponseModel {
    name?: string | undefined;
    token?: string | undefined;
    role?: Status;
}

/** <p>Значения:</p><ul></ul> */
export enum Status {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class Student implements IStudent {
    id?: number;
    fullName?: string | undefined;
    group?: string | undefined;
    linkToProfile?: string | undefined;

    constructor(data?: IStudent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.group = _data["group"];
            this.linkToProfile = _data["linkToProfile"];
        }
    }

    static fromJS(data: any): Student {
        data = typeof data === 'object' ? data : {};
        let result = new Student();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["group"] = this.group;
        data["linkToProfile"] = this.linkToProfile;
        return data;
    }
}

export interface IStudent {
    id?: number;
    fullName?: string | undefined;
    group?: string | undefined;
    linkToProfile?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}